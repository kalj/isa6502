#!/usr/bin/python3
#
#

from assembly import disassemble, Instruction
import argparse
import sys

def format_source(statements, base_address):
    source = []
    next_label_id = 1
    labels = []
    for offset,statement_bytes,statement in statements:
        address = base_address+offset
        if isinstance(statement,Instruction):
            instr = statement
            instr_size = instr.size()
            bytes_str = " ".join([f"{b:02x}" for b in statement_bytes])
            source_line = f"{address:04x}  {bytes_str:8s}  {statement}"
            if instr.get_addrmode() == "r":
                branch_offset = instr._operand
                if branch_offset > 127:
                    branch_offset -= 256
                source_line = "{:28} ; ${:04x}".format(source_line,address+instr_size+branch_offset)
            if instr.get_mnemonic() in ["JSR", "JMP"]:
                target_addr = instr._operand
                label = f"sub_{next_label_id:04d}"
                next_label_id += 1
                labels.append((label,target_addr))
                source_line = "{:04x}  {:8s}  {} {}".format(address,bytes_str,instr.get_mnemonic(),label)

            source.append(source_line)
        else:
            # data directive
            for i,b in enumerate(statement_bytes):
                byte_addr = address+i
                byte_str  = f"{b:02x}"
                source.append(f"{byte_addr:04x}  {byte_str:8s}  .byte {byte_str}")

    for lbl,addr in labels:
        addrstr=f"{addr:04x}"
        lines = [line for line in source if line.startswith(addrstr)]
        assert len(lines) == 1
        i = source.index(lines[0])
        source.insert(i,f"{lbl}:")

    return source


def auto_int(x):
        return int(x, 0)

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='6502 Disassembler')
    parser.add_argument('input', help='name of binary to disassemble')
    parser.add_argument('-b','--base-address',
                        type=auto_int,
                        default=0x9000,
                        help='base address offset')

    args = parser.parse_args()

    base_address = args.base_address

    if args.input == '-':
        prog = sys.stdin.buffer.read()
    else:
        prog = open(args.input,"rb").read()

    statements = disassemble(prog)

    source = format_source(statements,base_address)

    for l in source:
        print(l)
