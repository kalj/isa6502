#!/usr/bin/python3
#
#

import sys
from pathlib import Path
import argparse
from assembly import *

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='6502 Assembler')
    parser.add_argument('input', help='name of source file to assemble')
    parser.add_argument('-v','--verbose',
                        action='store_true',
                        help='enable verbose output')
    parser.add_argument('-o','--output',
                        help='name of output file')
    parser.add_argument('-f', '--format', choices=['hex', 'bin'], help='output format to use')

    # options for .bin
    parser.add_argument('-s', '--start-address', help='Address to start outputting from (0x8000 by default)')
    parser.add_argument('-g', '--gap-byte', help='Byte value to use to fill gap regions (0xff by default)')

    # options for .hex
    parser.add_argument('-b', '--base-address', help='Address base for hex section offsets (0x8000 by default)')

    args = parser.parse_args()

    #----------------------------------------------------------------
    # Determine format
    #----------------------------------------------------------------

    fmt = 'hex' # default

    # if an actual (not '-') filename is given, suffix decides
    if args.output and args.output != '-':
        suf = Path(args.output).suffix
        if suf in ['hex','bin']:
            fmt = suf

    # format arg overrides if given
    if args.format:
        fmt = args.format

    #------------------------------------------------------------
    # options for output format
    #------------------------------------------------------------
    if fmt == 'hex':
        hex_base = 0x8000
        if args.base_address is not None:
            hex_base = int(args.base_address, 0)

        # invalid args
        if args.start_address is not None:
            raise RuntimeError('Flag --start-address is not valid for hex output, did you mean --base-address ?')

        if args.gap_byte is not None:
            raise RuntimeError('Flag --gap-byte is not valid for hex output')

    if fmt == 'bin':
        gap_byte = 0xff
        if args.gap_byte is not None:
            gap_byte = int(args.gap_byte, 0)

        start_address = 0x8000
        if args.start_address is not None:
            start_address = int(args.start_address, 0)

        # invalid args
        if args.base_addres is not None:
            raise RuntimeError('Flag --base-address is not valid for bin output, did you mean --start-address ?')


    input_path=Path(args.input)
    if not input_path.exists():
        raise RuntimeError(f'Input file does not exist: {input_path}')

    #------------------------------------------------------------
    # determine output filename
    #------------------------------------------------------------

    # by default, use input filename with fmt as suffix
    outputfilename=str(input_path.with_suffix(f'.{fmt}'))

    # naturally, --output overrides
    if args.output:
        outputfilename=args.output

    #------------------------------------------------------------
    # Read input
    #------------------------------------------------------------
    with open(input_path,"r") as f:
        raw_source = f.readlines()

    try:
        sections = assemble(raw_source)

    except SyntaxError as e:
        linum = e.get_linum()
        if linum:
            print(f"SyntaxError on line {linum}: {e}", file=sys.stderr)
            print(raw_source[linum].rstrip(), file=sys.stderr)
        else:
            print(f"SyntaxError: {e}", file=sys.stderr)
        sys.exit(1)

    if args.verbose:
        print("Parsed code:")

        first_section=True
        for section in sections:
            if first_section:
                first_section = False
            else:
                print('...')

            addr = section['base_address']
            source = []
            for s in section['statements']:
                instr_bytes = s.encode()
                bytes_str = " ".join([f"{b:02x}" for b in instr_bytes])
                source.append( (f"{addr:04x}",bytes_str,str(s)) )
                addr += s.size()
            widths = [max(len(s) for s in strs) for strs in zip(*source)]

            for line in source:
                print("{}  {}  {}".format(line[0],line[1].ljust(widths[1]),line[2]))

    prog_sections = encode_program(sections)

    if fmt == 'hex':
        output_bytes = program_sections_to_hex(prog_sections, hex_base)
    else:
        output_bytes = program_sections_to_binary(prog_sections, start_address, fillbyte=gap_byte)


    if outputfilename == '-':
        sys.stdout.buffer.write(output_bytes)
    else:
        out_path = Path(outputfilename)
        out_path.write_bytes(output_bytes)
