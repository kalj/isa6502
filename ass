#!/usr/bin/python3
#
#

import sys
from pathlib import Path
import argparse
from assembly import assemble, encode_program, SyntaxError

def auto_int(x):
        return int(x, 0)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='6502 Assembler')
    parser.add_argument('input', help='name of source file to assemble')
    parser.add_argument('-v','--verbose',
                        action='store_true',
                        help='enable verbose output')
    parser.add_argument('-o','--output',
                        default='a.out',
                        help='name of output file')
    parser.add_argument('-b','--base-address',
                        default=0x9000,
                        type=auto_int,
                        help='base address offset')

    args = parser.parse_args()

    base_address = args.base_address

    inputfilename=args.input
    outputfilename=args.output

    raw_source = open(inputfilename,"r").readlines()

    try:
        statements = assemble(raw_source, base_address)

    except SyntaxError as e:
        linum = e.get_linum()
        if linum:
            print(f"SyntaxError on line {linum}: {e}", file=sys.stderr)
            print(raw_source[linum].rstrip(), file=sys.stderr)
        else:
            print(f"SyntaxError: {e}", file=sys.stderr)
        sys.exit(1)

    if args.verbose:
        addr = base_address
        source = []
        for s in statements:
            instr_bytes = s.encode()
            bytes_str = " ".join([f"{b:02x}" for b in instr_bytes])
            source.append( (f"{addr:04x}",bytes_str,str(s)) )
            addr += s.size()
        widths = [max(len(s) for s in strs) for strs in zip(*source)]

        print("Parsed code:")
        for line in source:
            print("{}  {}  {}".format(line[0],line[1].ljust(widths[1]),line[2]))

    prog = encode_program(statements)

    if outputfilename == '-':
        sys.stdout.buffer.write(prog)
    else:
        out_path = Path(outputfilename)
        out_path.write_bytes(prog)
