#!/usr/bin/python3
#
#

import sys
import re
import argparse
import isa6502

# ===================================================================
# preprocess
# ===================================================================
def preprocess(src_in):
    src_out = []
    for i,line in enumerate(src_in):
        idx = line.find(";")
        if idx>=0:
            l = line[:idx]
        else:
            l = line

        l = l.strip()
        if len(l) == 0:
            continue

        src_out.append((l,i))
    return src_out

# ===================================================================
# Harvest labels
# ===================================================================
def harvest_labels(src_in):
    labels={}
    current_labels = []
    src_out = []
    for line,linum in src_in:
        m = re.match("^(\w+):(.*)$",line)
        if m:
            current_labels.append(m.group(1))
            line = m.group(2).strip()

        if line:
            current_idx = len(src_out)
            if current_labels:
                for l in current_labels:
                    labels[l] = current_idx
                current_labels = []

            src_out.append((line,linum))
        # else line was empty, i.e. there was nothin after the label

    if current_labels:
         SyntaxError("Label at end of file")
         raise e

    return src_out,labels

def parse_instructions(source):
    instructions = []
    for line,linum in source:
        try:
            instructions.append(isa6502.parse_instruction(line))
        except isa6502.SyntaxError as e:
            e.set_linum(linum)
            raise e

    return instructions

def resolve_labels(instructions_in,labels):

    byte_offset = 0
    instr_offsets = []

    for instr in instructions_in:
        instr_offsets.append(byte_offset)
        byte_offset += instr.size()

    label_offsets = {l:instr_offsets[idx] for l,idx in labels.items()}

    for i,instr in enumerate(instructions_in):
        if instr.get_addrmode() == "r":
            label = instr._operand
            branch_offset = label_offsets[label] - (instr_offsets[i]+instr.size())

            if branch_offset > 127 or branch_offset < -128:
                raise SyntaxError("Out of range branch (branches are limited to -128 to +127)")

            branch_offset = (branch_offset+256) % 256 # convert to unsigned

            instr._operand = branch_offset

    return instructions_in

def encode(instructions):
    ops = []
    for instr in instructions:
        ops.extend(instr.encode())

    return bytes(ops)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='6502 Assembler')
    parser.add_argument('input', help='name of source file to assemble')
    parser.add_argument('-o','--output',
                        default='a.out',
                        help='name of output file')

    args = parser.parse_args()

    inputfilename=args.input
    outputfilename=args.output

    raw_source = open(inputfilename,"r").readlines()

    # preprocess
    pp_source = preprocess(raw_source)

    try:
        # Harvest labels
        source,labels = harvest_labels(pp_source)

        instructions = parse_instructions(source)

        instructions = resolve_labels(instructions,labels)

    except isa6502.SyntaxError as e:
        linum = e.get_linum()
        if linum:
            print("SyntaxError on line {}: {}".format(linum,str(e)))
            print(raw_source[linum])
        else:
            print("SyntaxError: {}".format(str(e)))
        sys.exit(1)

    prog = encode(instructions)

    open(outputfilename,"wb").write(prog)
